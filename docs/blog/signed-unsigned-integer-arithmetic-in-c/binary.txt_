
Key to flag abbreviations

Flag Name	Abbreviation
Overflow	OV
Direction	UP
Interrupt	EI
Sign	PL
Zero	ZR
Aux Carry	AC
Parity	PE
Carry	CY

int main()
{

	__asm {
#if 0
		al is 1-byte meaning 00000000 to 11111111
		The entire 8 bits can represent unsinged numbers
		from 0 - 255 or signed numbers from -128 to 127 in 2's complement form
#endif
		//Sign flag gets set if any operation results
		// in a value whose MSB gets set.
		// for example: if we take below example
		// where 0x1 is added to 0x80000001
		// the result will be  0x80000010
		// this does not saying anything about
		// how the numbers are treated. its up
		// to us to interpret
		// 0x80000001 (either unsigned 2147483649 or signed -2147483647)
		// and result as
		// 0x80000002 (either unsigned 2147483650 or signed -2147483646)
		mov al, 0x81
		add al, 0x1
		// or
		PUSH 0
		POPF
		mov al, 0x7F
		add al, 0x1

		// Carry flag is set when a operation results in carry when cannot be
		// accommodated in the destination. This is indeed happens when the
		// result overflows. Unfortunately overflow flag is a misnomer. Will
		// talk about that flag later.
		PUSH 0
		POPF
		mov al, 0xFF
		add al, 0x1

		// Overflow flag â€” Set if the integer result is too
		// large a positive number or too small a negative
		// number(excluding the sign - bit) to fit in the
		// destination operand; cleared otherwise.This flag
		// indicates an overflow condition for
		// signed - integer(two's complement) arithmetic
		PUSH 0
		POPF
		mov al, 0x7F
		add al, 0x1

	}
}

int main()
{

    // If both operands have the same type, then no further conversion is needed.
    {
        signed int var1 = -10;
        signed int var2 = 10;
        signed int res = var1 * var2;
    }
    {
        unsigned int var1 = 10;
        unsigned int var2 = 10;
        unsigned int res = var1 * var2;
    }

    // Otherwise, if both operands have signed integer types or both have unsigned
    // integer types, the operand with the type of lesser integer conversion rank is
    // converted to the type of the operand with greater rank.
    {
        signed short var1 = 10;
        signed int var2 = 10;
        signed int res = var1 * var2; //var1 gets converted to var2's type
        // Basically underlying size of var1 gets expanded to var2's size
    }
    {
        unsigned short var1 = 10;
        unsigned int var2 = 10;
        unsigned int res = var1 * var2; //var1 gets converted to var2's type
        // Basically underlying size of var1 gets expanded to var2's size
    }

    // Otherwise, if the operand that has unsigned integer type has rank greater or
    // equal to the rank of the type of the other operand, then the operand with
    // signed integer type is converted to the type of the operand with unsigned
    // integer type.
    {
        signed short var1 = -10;
        unsigned int var2 = 100u;  //Rank of int is > Rank of short
        unsigned int res = var2 * var1; //var1 gets converted to var2's type
        //
    }
    {
        signed int var1 = -10;
        unsigned long var2 = 100u;  //Rank of long is > Rank of int
        unsigned int res = var2 * var1; //var1 gets converted to var2's type
        //
    }

    {
        signed int var1 = -10;
        unsigned int var2 = 10;  //Rank of unsigned int is == Rank of signed int
        unsigned long res = var2 * var1;
    }

    // Otherwise, if the type of the operand with signed integer type can represent
    // all of the values of the type of the operand with unsigned integer type, then
    // the operand with unsigned integer type is converted to the type of the
    // operand with signed integer type.
    {
        unsigned short var1 = 100u;
        signed int var2 = -10;
        unsigned int res = var1 * var2;
    }
    // Otherwise, both operands are converted to the unsigned integer type
    // corresponding to the type of the operand with signed integer type.
    {
        unsigned int var1 = 10;
        signed long var2 = -10; //Rank of long is > Rank of int and signed long cannot fit unsigned int
        unsigned long res = var1 * var2;
    }
}

  0|0x0 |00000000
  1|0x1 |00000001
  2|0x2 |00000010
  3|0x3 |00000011
  4|0x4 |00000100
  5|0x5 |00000101
  6|0x6 |00000110
  7|0x7 |00000111
  8|0x8 |00001000
  9|0x9 |00001001
 10|0xa |00001010
 11|0xb |00001011
 12|0xc |00001100
 13|0xd |00001101
 14|0xe |00001110
 15|0xf |00001111
 16|0x10|00010000
 17|0x11|00010001
 18|0x12|00010010
 19|0x13|00010011
 20|0x14|00010100
 21|0x15|00010101
 22|0x16|00010110
 23|0x17|00010111
 24|0x18|00011000
 25|0x19|00011001
 26|0x1a|00011010
 27|0x1b|00011011
 28|0x1c|00011100
 29|0x1d|00011101
 30|0x1e|00011110
 31|0x1f|00011111
 32|0x20|00100000
 33|0x21|00100001
 34|0x22|00100010
 35|0x23|00100011
 36|0x24|00100100
 37|0x25|00100101
 38|0x26|00100110
 39|0x27|00100111
 40|0x28|00101000
 41|0x29|00101001
 42|0x2a|00101010
 43|0x2b|00101011
 44|0x2c|00101100
 45|0x2d|00101101
 46|0x2e|00101110
 47|0x2f|00101111
 48|0x30|00110000
 49|0x31|00110001
 50|0x32|00110010
 51|0x33|00110011
 52|0x34|00110100
 53|0x35|00110101
 54|0x36|00110110
 55|0x37|00110111
 56|0x38|00111000
 57|0x39|00111001
 58|0x3a|00111010
 59|0x3b|00111011
 60|0x3c|00111100
 61|0x3d|00111101
 62|0x3e|00111110
 63|0x3f|00111111
 64|0x40|01000000
 65|0x41|01000001
 66|0x42|01000010
 67|0x43|01000011
 68|0x44|01000100
 69|0x45|01000101
 70|0x46|01000110
 71|0x47|01000111
 72|0x48|01001000
 73|0x49|01001001
 74|0x4a|01001010
 75|0x4b|01001011
 76|0x4c|01001100
 77|0x4d|01001101
 78|0x4e|01001110
 79|0x4f|01001111
 80|0x50|01010000
 81|0x51|01010001
 82|0x52|01010010
 83|0x53|01010011
 84|0x54|01010100
 85|0x55|01010101
 86|0x56|01010110
 87|0x57|01010111
 88|0x58|01011000
 89|0x59|01011001
 90|0x5a|01011010
 91|0x5b|01011011
 92|0x5c|01011100
 93|0x5d|01011101
 94|0x5e|01011110
 95|0x5f|01011111
 96|0x60|01100000
 97|0x61|01100001
 98|0x62|01100010
 99|0x63|01100011
100|0x64|01100100
101|0x65|01100101
102|0x66|01100110
103|0x67|01100111
104|0x68|01101000
105|0x69|01101001
106|0x6a|01101010
107|0x6b|01101011
108|0x6c|01101100
109|0x6d|01101101
110|0x6e|01101110
111|0x6f|01101111
112|0x70|01110000
113|0x71|01110001
114|0x72|01110010
115|0x73|01110011
116|0x74|01110100
117|0x75|01110101
118|0x76|01110110
119|0x77|01110111
120|0x78|01111000
121|0x79|01111001
122|0x7a|01111010
123|0x7b|01111011
124|0x7c|01111100
125|0x7d|01111101
126|0x7e|01111110
127|0x7f|01111111
128|0x80|10000000
129|0x81|10000001
130|0x82|10000010
131|0x83|10000011
132|0x84|10000100
133|0x85|10000101
134|0x86|10000110
135|0x87|10000111
136|0x88|10001000
137|0x89|10001001
138|0x8a|10001010
139|0x8b|10001011
140|0x8c|10001100
141|0x8d|10001101
142|0x8e|10001110
143|0x8f|10001111
144|0x90|10010000
145|0x91|10010001
146|0x92|10010010
147|0x93|10010011
148|0x94|10010100
149|0x95|10010101
150|0x96|10010110
151|0x97|10010111
152|0x98|10011000
153|0x99|10011001
154|0x9a|10011010
155|0x9b|10011011
156|0x9c|10011100
157|0x9d|10011101
158|0x9e|10011110
159|0x9f|10011111
160|0xa0|10100000
161|0xa1|10100001
162|0xa2|10100010
163|0xa3|10100011
164|0xa4|10100100
165|0xa5|10100101
166|0xa6|10100110
167|0xa7|10100111
168|0xa8|10101000
169|0xa9|10101001
170|0xaa|10101010
171|0xab|10101011
172|0xac|10101100
173|0xad|10101101
174|0xae|10101110
175|0xaf|10101111
176|0xb0|10110000
177|0xb1|10110001
178|0xb2|10110010
179|0xb3|10110011
180|0xb4|10110100
181|0xb5|10110101
182|0xb6|10110110
183|0xb7|10110111
184|0xb8|10111000
185|0xb9|10111001
186|0xba|10111010
187|0xbb|10111011
188|0xbc|10111100
189|0xbd|10111101
190|0xbe|10111110
191|0xbf|10111111
192|0xc0|11000000
193|0xc1|11000001
194|0xc2|11000010
195|0xc3|11000011
196|0xc4|11000100
197|0xc5|11000101
198|0xc6|11000110
199|0xc7|11000111
200|0xc8|11001000
201|0xc9|11001001
202|0xca|11001010
203|0xcb|11001011
204|0xcc|11001100
205|0xcd|11001101
206|0xce|11001110
207|0xcf|11001111
208|0xd0|11010000
209|0xd1|11010001
210|0xd2|11010010
211|0xd3|11010011
212|0xd4|11010100
213|0xd5|11010101
214|0xd6|11010110
215|0xd7|11010111
216|0xd8|11011000
217|0xd9|11011001
218|0xda|11011010
219|0xdb|11011011
220|0xdc|11011100
221|0xdd|11011101
222|0xde|11011110
223|0xdf|11011111
224|0xe0|11100000
225|0xe1|11100001
226|0xe2|11100010
227|0xe3|11100011
228|0xe4|11100100
229|0xe5|11100101
230|0xe6|11100110
231|0xe7|11100111
232|0xe8|11101000
233|0xe9|11101001
234|0xea|11101010
235|0xeb|11101011
236|0xec|11101100
237|0xed|11101101
238|0xee|11101110
239|0xef|11101111
240|0xf0|11110000
241|0xf1|11110001
242|0xf2|11110010
243|0xf3|11110011
244|0xf4|11110100
245|0xf5|11110101
246|0xf6|11110110
247|0xf7|11110111
248|0xf8|11111000
249|0xf9|11111001
250|0xfa|11111010
251|0xfb|11111011
252|0xfc|11111100
253|0xfd|11111101
254|0xfe|11111110
255|0xff|11111111
==========
-128|0x80|10000000
-127|0x81|10000001
-126|0x82|10000010
-125|0x83|10000011
-124|0x84|10000100
-123|0x85|10000101
-122|0x86|10000110
-121|0x87|10000111
-120|0x88|10001000
-119|0x89|10001001
-118|0x8a|10001010
-117|0x8b|10001011
-116|0x8c|10001100
-115|0x8d|10001101
-114|0x8e|10001110
-113|0x8f|10001111
-112|0x90|10010000
-111|0x91|10010001
-110|0x92|10010010
-109|0x93|10010011
-108|0x94|10010100
-107|0x95|10010101
-106|0x96|10010110
-105|0x97|10010111
-104|0x98|10011000
-103|0x99|10011001
-102|0x9a|10011010
-101|0x9b|10011011
-100|0x9c|10011100
-99|0x9d|10011101
-98|0x9e|10011110
-97|0x9f|10011111
-96|0xa0|10100000
-95|0xa1|10100001
-94|0xa2|10100010
-93|0xa3|10100011
-92|0xa4|10100100
-91|0xa5|10100101
-90|0xa6|10100110
-89|0xa7|10100111
-88|0xa8|10101000
-87|0xa9|10101001
-86|0xaa|10101010
-85|0xab|10101011
-84|0xac|10101100
-83|0xad|10101101
-82|0xae|10101110
-81|0xaf|10101111
-80|0xb0|10110000
-79|0xb1|10110001
-78|0xb2|10110010
-77|0xb3|10110011
-76|0xb4|10110100
-75|0xb5|10110101
-74|0xb6|10110110
-73|0xb7|10110111
-72|0xb8|10111000
-71|0xb9|10111001
-70|0xba|10111010
-69|0xbb|10111011
-68|0xbc|10111100
-67|0xbd|10111101
-66|0xbe|10111110
-65|0xbf|10111111
-64|0xc0|11000000
-63|0xc1|11000001
-62|0xc2|11000010
-61|0xc3|11000011
-60|0xc4|11000100
-59|0xc5|11000101
-58|0xc6|11000110
-57|0xc7|11000111
-56|0xc8|11001000
-55|0xc9|11001001
-54|0xca|11001010
-53|0xcb|11001011
-52|0xcc|11001100
-51|0xcd|11001101
-50|0xce|11001110
-49|0xcf|11001111
-48|0xd0|11010000
-47|0xd1|11010001
-46|0xd2|11010010
-45|0xd3|11010011
-44|0xd4|11010100
-43|0xd5|11010101
-42|0xd6|11010110
-41|0xd7|11010111
-40|0xd8|11011000
-39|0xd9|11011001
-38|0xda|11011010
-37|0xdb|11011011
-36|0xdc|11011100
-35|0xdd|11011101
-34|0xde|11011110
-33|0xdf|11011111
-32|0xe0|11100000
-31|0xe1|11100001
-30|0xe2|11100010
-29|0xe3|11100011
-28|0xe4|11100100
-27|0xe5|11100101
-26|0xe6|11100110
-25|0xe7|11100111
-24|0xe8|11101000
-23|0xe9|11101001
-22|0xea|11101010
-21|0xeb|11101011
-20|0xec|11101100
-19|0xed|11101101
-18|0xee|11101110
-17|0xef|11101111
-16|0xf0|11110000
-15|0xf1|11110001
-14|0xf2|11110010
-13|0xf3|11110011
-12|0xf4|11110100
-11|0xf5|11110101
-10|0xf6|11110110
 -9|0xf7|11110111
 -8|0xf8|11111000
 -7|0xf9|11111001
 -6|0xfa|11111010
 -5|0xfb|11111011
 -4|0xfc|11111100
 -3|0xfd|11111101
 -2|0xfe|11111110
 -1|0xff|11111111
  0|0x0 |00000000
  1|0x1 |00000001
  2|0x2 |00000010
  3|0x3 |00000011
  4|0x4 |00000100
  5|0x5 |00000101
  6|0x6 |00000110
  7|0x7 |00000111
  8|0x8 |00001000
  9|0x9 |00001001
 10|0xa |00001010
 11|0xb |00001011
 12|0xc |00001100
 13|0xd |00001101
 14|0xe |00001110
 15|0xf |00001111
 16|0x10|00010000
 17|0x11|00010001
 18|0x12|00010010
 19|0x13|00010011
 20|0x14|00010100
 21|0x15|00010101
 22|0x16|00010110
 23|0x17|00010111
 24|0x18|00011000
 25|0x19|00011001
 26|0x1a|00011010
 27|0x1b|00011011
 28|0x1c|00011100
 29|0x1d|00011101
 30|0x1e|00011110
 31|0x1f|00011111
 32|0x20|00100000
 33|0x21|00100001
 34|0x22|00100010
 35|0x23|00100011
 36|0x24|00100100
 37|0x25|00100101
 38|0x26|00100110
 39|0x27|00100111
 40|0x28|00101000
 41|0x29|00101001
 42|0x2a|00101010
 43|0x2b|00101011
 44|0x2c|00101100
 45|0x2d|00101101
 46|0x2e|00101110
 47|0x2f|00101111
 48|0x30|00110000
 49|0x31|00110001
 50|0x32|00110010
 51|0x33|00110011
 52|0x34|00110100
 53|0x35|00110101
 54|0x36|00110110
 55|0x37|00110111
 56|0x38|00111000
 57|0x39|00111001
 58|0x3a|00111010
 59|0x3b|00111011
 60|0x3c|00111100
 61|0x3d|00111101
 62|0x3e|00111110
 63|0x3f|00111111
 64|0x40|01000000
 65|0x41|01000001
 66|0x42|01000010
 67|0x43|01000011
 68|0x44|01000100
 69|0x45|01000101
 70|0x46|01000110
 71|0x47|01000111
 72|0x48|01001000
 73|0x49|01001001
 74|0x4a|01001010
 75|0x4b|01001011
 76|0x4c|01001100
 77|0x4d|01001101
 78|0x4e|01001110
 79|0x4f|01001111
 80|0x50|01010000
 81|0x51|01010001
 82|0x52|01010010
 83|0x53|01010011
 84|0x54|01010100
 85|0x55|01010101
 86|0x56|01010110
 87|0x57|01010111
 88|0x58|01011000
 89|0x59|01011001
 90|0x5a|01011010
 91|0x5b|01011011
 92|0x5c|01011100
 93|0x5d|01011101
 94|0x5e|01011110
 95|0x5f|01011111
 96|0x60|01100000
 97|0x61|01100001
 98|0x62|01100010
 99|0x63|01100011
100|0x64|01100100
101|0x65|01100101
102|0x66|01100110
103|0x67|01100111
104|0x68|01101000
105|0x69|01101001
106|0x6a|01101010
107|0x6b|01101011
108|0x6c|01101100
109|0x6d|01101101
110|0x6e|01101110
111|0x6f|01101111
112|0x70|01110000
113|0x71|01110001
114|0x72|01110010
115|0x73|01110011
116|0x74|01110100
117|0x75|01110101
118|0x76|01110110
119|0x77|01110111
120|0x78|01111000
121|0x79|01111001
122|0x7a|01111010
123|0x7b|01111011
124|0x7c|01111100
125|0x7d|01111101
126|0x7e|01111110
127|0x7f|01111111

#include <stdio.h>
char res[9] = {};
char * getbinary(int x) {
	int k = 0;
	x = x & 0xff;
	for (int i = 7; i >= 0; i--) {
		if (((x >> i) & 1) == 1) {
			res[k++] = '1';
		}
		else {
			res[k++] = '0';
		}
	}
	res[8] = 0;
	return res;
}
int main()
{
	for (int i = 0; i < 256; i++) {
		printf("\n%3u|0x%-2x|%8s", i,i&0xff, getbinary(i));
	}
	printf("\n==========");
	for (int i = -128; i < 128; i++) {
		printf("\n%3d|0x%-2x|%8s", i, i & 0xff, getbinary(i));
	}
}
