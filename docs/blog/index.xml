<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Vineel Kovvuri</title>
    <link>/blog/</link>
    <description>Recent content in Blogs on Vineel Kovvuri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 18:33:07 -0700</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compiler Internals</title>
      <link>/blog/compiler-internals/</link>
      <pubDate>Fri, 01 Nov 2019 18:33:07 -0700</pubDate>
      <guid>/blog/compiler-internals/</guid>
      <description>&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888&#34;&gt;//a.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;myadd&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;10&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;100&lt;/span&gt;; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum += i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;myadd2&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;10&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;100&lt;/span&gt;; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum += i*i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;myadd&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;cl /c a.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;link /dump /symbols a.obj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;008&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;00000000&lt;/span&gt; SECT3  notype ()    External     | myadd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;009&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;00000050&lt;/span&gt; SECT3  notype ()    External     | myadd2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00A 000000A0 SECT3  notype ()    External     | main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;link /dump&lt;/strong&gt; command dumps the symbols that are part of the obj file. The&#xA;compiler cannot optimize myadd2 because technically these unused functions can&#xA;be accessed by functions in other libs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UART - From AVR to Linux to Logic Analyzer</title>
      <link>/blog/uart-from-avr-to-linux-to-logic-analyzer/</link>
      <pubDate>Fri, 20 Sep 2019 18:33:07 -0700</pubDate>
      <guid>/blog/uart-from-avr-to-linux-to-logic-analyzer/</guid>
      <description>&lt;h1 id=&#34;uart---from-avr-to-linux-to-logic-analyzer&#34;&gt;UART - From AVR to Linux to Logic Analyzer&lt;/h1&gt;&#xA;&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;In this article, let&amp;rsquo;s see how a program running on Atmega328PU microcontroller&#xA;can communicate to external world using UART. In order to run through this&#xA;exercise we need below equipment.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.aliexpress.com/item/32973635527.html?spm=a2g0s.9042311.0.0.27424c4dOZJfJV&#34;&gt;Atmega328PU Microcontroller&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Breadboard&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.aliexpress.com/item/32651814443.html?spm=a2g0s.9042311.0.0.27424c4dOZJfJV&#34;&gt;AVR/USBASP programmer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B00QT7LQ88/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&#34;&gt;USB to TTL Adapater&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.aliexpress.com/item/33062091072.html?spm=a2g0s.9042311.0.0.27424c4dHus6xH&#34;&gt;Logic Analyzer&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.aliexpress.com/item/33024255264.html?spm=a2g0s.9042311.0.0.65aa4c4dDiDkXx&#34;&gt;Digital Oscilloscope&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;atmega328pu-pinout&#34;&gt;Atmega328PU pinout&lt;/h1&gt;&#xA;&lt;p&gt;It is an 8-bit microcontroller(uC) with following pinout. All its digital pins&#xA;are grouped in to 4 banks(PA/PB/PC/PD).&#xA;&lt;img src=&#34;Atmega328PUPinout.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Does It Take To Write An Emulator In Java?</title>
      <link>/blog/what-does-it-take-to-write-an-emulator-in-java/</link>
      <pubDate>Wed, 10 Apr 2019 18:33:07 -0700</pubDate>
      <guid>/blog/what-does-it-take-to-write-an-emulator-in-java/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;I am proud, This weekend I did some productive work. I was able to code Chip&#xA;8 emulator in Java over a night. I have always been fascinated by them and&#xA;finally I was able to get the damn thing to work! For those of you who are&#xA;not familiar with software emulator, It is a software which can emulate the&#xA;functionality of other hardware or software components. Notable examples are&#xA;video game emulators(&lt;a href=&#34;https://en.wikipedia.org/wiki/DOSBox&#34;&gt;Dosbox&lt;/a&gt; ,&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_video_game_emulators&#34;&gt;NES Emulator&lt;/a&gt;),&#xA;general purpose software emulators(&lt;a href=&#34;https://en.wikipedia.org/wiki/QEMU&#34;&gt;QEmu&lt;/a&gt;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting User Mode Break Points From Kd Aka .process /i Vs .process /r /p</title>
      <link>/blog/usermode-breakpoints-from-kd/</link>
      <pubDate>Sun, 10 Mar 2019 18:33:07 -0700</pubDate>
      <guid>/blog/usermode-breakpoints-from-kd/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;When performing KD(Kernel Debugging) in Windows with Windbg if you have to set a&#xA;break point in a user mode process we should always use &lt;strong&gt;.process /i address;&#xA;g; .reload /user&lt;/strong&gt;. Lot of good content is written on the&#xA;&lt;a href=&#34;https://www.osronline.com/article.cfm%5Earticle=576.htm&#34;&gt;internet&lt;/a&gt; on this&#xA;command, but nothing seemed to explain why this command should be used instead&#xA;of the familiar &lt;strong&gt;.process /r /p address&lt;/strong&gt;. I would like to shed some light on&#xA;this. Before reading any further I would strongly encourage you to read about it&#xA;from above link. In this article I assume some basic knowledge on how kernel&#xA;debugging is done with Windbg. Also, I would like to start with the following&#xA;question.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Signed/Unsigned Integer Arithmetic In C</title>
      <link>/blog/signed-unsigned-integer-arithmetic-in-c/</link>
      <pubDate>Sun, 10 Feb 2019 18:33:07 -0700</pubDate>
      <guid>/blog/signed-unsigned-integer-arithmetic-in-c/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;This article is about understanding how integer conversions happen in C&#xA;language. The C standard defines the integer conversion rules agnostic to&#xA;any specific machine architecture. This also makes things more complicated&#xA;for programmers to understand.&lt;/p&gt;&#xA;&lt;p&gt;First of all, Why do we need integer conversions at all? The answer is&#xA;simple, we need to have single type for any given expression. Let&amp;rsquo;s say we&#xA;have an expression &lt;em&gt;&lt;expr1&gt;&lt;op&gt;&lt;expr2&gt;&lt;/em&gt; when expr1 and expr2 are of&#xA;different types, we want the resulting expression from this to have one&#xA;single type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pdb Files: The Glue Between The Binary File And Source Code</title>
      <link>/blog/pdb-files-the-glue-between-the-binary-file-and-source-code/</link>
      <pubDate>Thu, 10 Jan 2019 18:33:07 -0700</pubDate>
      <guid>/blog/pdb-files-the-glue-between-the-binary-file-and-source-code/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;Have you ever wondered how a debugger magically gets you to the correct pdb and&#xA;correct sources when debugging an application? This article talks exactly that in&#xA;the context of Windbg.&lt;/p&gt;&#xA;&lt;p&gt;As you might be aware of, PDB files(also called as symbol files) is the glue&#xA;between your application binary and the source code. There are two key Environment&#xA;variables which configures Windbg about where to look for symbols and sources.&#xA;They are _NT_SYMBOL_PATH and _NT_SOURCE_PATH. The _NT_SYMBOL_PATH points&#xA;to the directory containing your PDBs(also called as symbol files) or to a symbol&#xA;server. _NT_SOURCE_PATH points to the directory of your sources or to a source&#xA;server which indexes the soruce files. One important point to remember here is&#xA;one or more source files make up one or more binary files. But each binary will&#xA;have a single PDB unless the source code is modified. This is important because&#xA;Windbg has to perform lot of book keeping to map binary symbols with their source&#xA;locations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCI Express Basics 101</title>
      <link>/blog/pci-express-basics-101/</link>
      <pubDate>Mon, 10 Dec 2018 18:33:07 -0700</pubDate>
      <guid>/blog/pci-express-basics-101/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;PCI Express: It is a standard which comes in multiple generations and multiple&#xA;lane configurations. PCI-E is in its 5th generation, but mostly the current&#xA;shipping generation is 3rd generation also called as Gen 3. Mainly each&#xA;generation improves upon the previous generation regarding the speed per lane&#xA;supported by the protocol.&lt;/p&gt;&#xA;&lt;p&gt;Below is the table for each generation and lane speed&#xA;For single-lane and 16-lane links, in each direction:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lib Files 101</title>
      <link>/blog/lib-files-101/</link>
      <pubDate>Sat, 10 Nov 2018 18:33:07 -0700</pubDate>
      <guid>/blog/lib-files-101/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;During the compilation one of the crucial step after assembling is&#xA;creating the Object files. The collection of these object files is&#xA;called a lib file. We can create these .lib files through following&#xA;visual studio project types&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Static Library&lt;/li&gt;&#xA;&lt;li&gt;Dynamic Linked Library&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The format of these .lib files is specified in &amp;lsquo;Archive (Library) File Format.&amp;rsquo;&#xA;section of &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#archive-library-file-formatspecification&#34;&gt;PE&#xA;Format&lt;/a&gt;.&#xA;As per the spec, .lib is an archive of individual .obj files with some metadata.&#xA;Multiple tools can be used to extract lib files. Visual Studio installation&#xA;contains Lib.exe tool. Since .lib and .obj files follow Unix COFF format Unix&#xA;binutil&amp;rsquo;s &amp;lsquo;ar&amp;rsquo; tool can be used to extract it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How Do Breakpoints Work In Debuggers?</title>
      <link>/blog/how-do-breakpoints-work-in-debuggers/</link>
      <pubDate>Wed, 10 Oct 2018 18:33:07 -0700</pubDate>
      <guid>/blog/how-do-breakpoints-work-in-debuggers/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;It&amp;rsquo;s been a while, I have got a chance to blog about low-level stuff. In this&#xA;article, I am going to explain how breakpoints work in debuggers. I am assuming&#xA;the reader is already familiar with what a breakpoint is? and how to set it in&#xA;your debugger of choice. The goal of this post is to explain the interplay&#xA;between Debugger, Debuggee, Operating System and the CPU.&lt;/p&gt;&#xA;&lt;h1 id=&#34;breakpoints-theory&#34;&gt;Breakpoints Theory&lt;/h1&gt;&#xA;&lt;p&gt;To get there, we have to ask ourselves  What does it mean by debugging a&#xA;program/process?. To keep it simple, It&amp;rsquo;s the controlled execution of a program&#xA;by other program. The devil is in the word controlled. Whenever you open a&#xA;debugger and launch a program or attach to a running process, the OS and the CPU&#xA;guarantees that any event (like dll loading or interrupts or exceptions etc)&#xA;happening on behalf of debuggee process are notified to debugger process for it&#xA;to take necessary action. The important thing to understand here is, it&amp;rsquo;s the&#xA;execution of debuggee which is causing the debugger to take actions on behalf of&#xA;it, not the other way around.  So there should be something in the debuggee&amp;rsquo;s&#xA;code that should cause CPU to do the heavy lifting.  This is where CPU&amp;rsquo;s&#xA;breakpoint instruction comes in. Every x86/amd64 CPU provides a special&#xA;instruction called breakpoint instruction Int 3 whose mnemonic is 0xCC. When a&#xA;piece of code executes this instruction, the CPU triggers a breakpoint interrupt&#xA;and notifies it to OS and asks it what needs to be done next. Now this event&#xA;from OS gets propagated to debugger by pausing all the threads in the debuggee.&#xA;Now it&amp;rsquo;s up to debugger to handle it according to its will.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Newbie&#39;s Introduction To Compilation Process And Reverse Engineering</title>
      <link>/blog/a-newbies-introduction-to-compilation-process-and-reverse-engineering/</link>
      <pubDate>Fri, 10 Aug 2018 18:33:07 -0700</pubDate>
      <guid>/blog/a-newbies-introduction-to-compilation-process-and-reverse-engineering/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;Compilers are surely the complex programs of all times. Even today, writing a&#xA;compiler with minimum set of tools is considered to be challenging. This&#xA;tutorial scratches the surface of different compiler phases involved in&#xA;translating a given source code to executable and also shows how this&#xA;information is useful in context of reverse engineering.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_Compiler_Collection&#34;&gt;GNU compiler collection&lt;/a&gt;&#xA;provides an excellent set of tools for dissecting the compilation process and to&#xA;understand the working of bits and bytes in the final executable. For this&#xA;tutorial I am using the following tools and considers C language to illustrate&#xA;the examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libspng - C Language Case Study</title>
      <link>/blog/c-case-studies/f/</link>
      <pubDate>Tue, 10 Jul 2018 18:33:07 -0700</pubDate>
      <guid>/blog/c-case-studies/f/</guid>
      <description>&lt;h1 id=&#34;build-system&#34;&gt;Build System&lt;/h1&gt;&#xA;&lt;p&gt;It uses meson build system to build the library&lt;/p&gt;&#xA;&lt;h1 id=&#34;data-structures&#34;&gt;Data Structures&lt;/h1&gt;&#xA;&lt;p&gt;It is not using any fancy data structures instead it relies on plain array&#xA;of objects and uses the traditional realloc function to expand them.&lt;/p&gt;&#xA;&lt;h1 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h1&gt;&#xA;&lt;p&gt;All variables are declared as when needed. This deviates from Linux source&#xA;code. In Linux kernel, declarations are done only in the beginning of a new&#xA;scope (either at the start of the function or start of a scope)&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
