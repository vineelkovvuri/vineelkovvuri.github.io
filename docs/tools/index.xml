<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Vineel Kovvuri</title>
    <link>//localhost:9999/tools/</link>
    <description>Recent content in Tools on Vineel Kovvuri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="//localhost:9999/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>//localhost:9999/tools/pagetablecalculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:9999/tools/pagetablecalculator/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;&#xA;&lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34;&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;&#xA;    &lt;title&gt;PageTableCalculator - Calculate x64 Page table entries required for a given memory range&lt;/title&gt;&#xA;    &lt;style&gt;&#xA;        * {&#xA;            font-family: monospace;&#xA;        }&#xA;&#xA;        .container {&#xA;            display: flex;&#xA;            flex-direction: column;&#xA;            gap: 5px;&#xA;            width: 500px;&#xA;            /* Set a fixed width for the container */&#xA;        }&#xA;&#xA;        .input-group {&#xA;            display: flex;&#xA;            align-items: center;&#xA;            gap: 10px;&#xA;        }&#xA;&#xA;        .input-group label {&#xA;            width: 50px;&#xA;            /* Set a fixed width for the labels */&#xA;            text-align: right;&#xA;            /* Align the label text to the right */&#xA;        }&#xA;&#xA;        .input-group select {&#xA;            width: 80px;&#xA;        }&#xA;&#xA;        .input-group input {&#xA;            flex: 1;&#xA;            padding: 5px;&#xA;            box-sizing: border-box;&#xA;        }&#xA;    &lt;/style&gt;&#xA;&lt;/head&gt;&#xA;&#xA;&lt;body&gt;&#xA;    &lt;h2&gt;PageTableCalculator - Calculate x64 Page table entries required for a given memory range&lt;/h2&gt;&#xA;    &lt;div class=&#34;container&#34;&gt;&#xA;        &lt;div class=&#34;input-group&#34;&gt;&#xA;            &lt;label for=&#34;tbMemHex&#34;&gt;Mem:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;tbMemHex&#34; value=&#34;0x0&#34;&gt;&#xA;            &lt;pre id=&#34;tbMemResults&#34;&gt;&lt;/pre&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;hr&gt;&#xA;        &lt;div class=&#34;input-group&#34;&gt;&#xA;            &lt;label for=&#34;tbFromHex&#34;&gt;From:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;tbFromHex&#34; value=&#34;0x0&#34;&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;input-group&#34;&gt;&#xA;            &lt;label for=&#34;tbSizeHex&#34;&gt;Size:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;tbSizeHex&#34; value=&#34;0x1000&#34;&gt;&#xA;            &lt;select id=&#34;quantity&#34; name=&#34;quantity&#34;&gt;&#xA;                &lt;option value=&#34;1&#34;&gt;1&lt;/option&gt;&#xA;                &lt;option value=&#34;2&#34;&gt;2&lt;/option&gt;&#xA;                &lt;option value=&#34;3&#34;&gt;3&lt;/option&gt;&#xA;                &lt;option value=&#34;4&#34;&gt;4&lt;/option&gt;&#xA;                &lt;option value=&#34;5&#34;&gt;5&lt;/option&gt;&#xA;                &lt;option value=&#34;6&#34;&gt;6&lt;/option&gt;&#xA;                &lt;option value=&#34;7&#34;&gt;7&lt;/option&gt;&#xA;                &lt;option value=&#34;8&#34;&gt;8&lt;/option&gt;&#xA;                &lt;option value=&#34;9&#34;&gt;9&lt;/option&gt;&#xA;                &lt;option value=&#34;10&#34;&gt;10&lt;/option&gt;&#xA;                &lt;option value=&#34;16&#34;&gt;16&lt;/option&gt;&#xA;                &lt;option value=&#34;32&#34;&gt;32&lt;/option&gt;&#xA;                &lt;option value=&#34;48&#34;&gt;48&lt;/option&gt;&#xA;                &lt;option value=&#34;64&#34;&gt;64&lt;/option&gt;&#xA;            &lt;/select&gt;&#xA;            &lt;select id=&#34;unit&#34; name=&#34;unit&#34;&gt;&#xA;                &lt;option value=&#34;bytes&#34;&gt;Bytes&lt;/option&gt;&#xA;                &lt;option value=&#34;kb&#34;&gt;KB&lt;/option&gt;&#xA;                &lt;option value=&#34;mb&#34;&gt;MB&lt;/option&gt;&#xA;                &lt;option value=&#34;gb&#34;&gt;GB&lt;/option&gt;&#xA;                &lt;option value=&#34;tb&#34;&gt;TB&lt;/option&gt;&#xA;            &lt;/select&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;input-group&#34;&gt;&#xA;            &lt;label for=&#34;tbToHex&#34;&gt;To:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;tbToHex&#34; value=&#34;0x0&#34; disabled=&#34;disabled&#34;&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;pre id=&#34;tbResults&#34;&gt;&lt;/pre&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;pre&gt;&#xA;X64 - 4K 5 Level Paging&#xA;&#xA;     63           57 56           48 47           39 38           30 29            21 20            12 11               0&#xA;     ┌──────────────┬───────────────┬───────────────┬───────────────┬────────────────┬────────────────┬──────────────────┐&#xA;     │ Sign         │  PML5E        │ PML4E         │Page Directory │ Page           │ Page           │Physical          │&#xA;     │ Extend       │  Offset       │ Offset        │Pointer        │ Directory      │ Table          │Page              │&#xA;     │              │               │               │Offset         │ Offset         │ Offset         │Offset            │&#xA;     └──────────────┴─┬─────────────┴─┬─────────────┴──┬────────────┴───┬────────────┴───┬────────────┴───┬──────────────┘&#xA;                      │9              │9               │9               │9               │9               │12&#xA;                      │               │                │                │                │                │&#xA;                      │  ┌─────┐      │  ┌─────┐       │  ┌─────┐       │  ┌─────┐       │  ┌─────┐       │  ┌─────┐&#xA;                      │  │     │      │  │     │       │  │     │       │  │     │       │  │     │       │  │     │&#xA;                      │  │     │      │  │     │       │  │     │       │  │     │       │  │     │       │  │     │&#xA;                      │  │     │      │  │     │       │  │     │       │  │     │       │  │     │       │  │     │&#xA;                      │  │     │      │  │     │       │  │     │       │  │     │       │  │     │       │  │     │&#xA;                      │  ├─────┤      │  ├─────┤       │  ├─────┤       │  ├─────┤       │  ├─────┤       │  ├─────┤&#xA;                      └─►│PML5E├───┐  └─►│PML4E│───┐   └─►│PDPE │───┐   └─►│PDE  │───┐   └─►│PTE  │───┐   └─►│ PA  │&#xA;                         ├─────┤   │52   ├─────┤   │52    ├─────┤   │52    ├─────┤   │52    ├─────┤   │52    ├─────┤&#xA;                         │     │   │     │     │   │      │     │   │      │     │   │      │     │   │      │     │&#xA;                  ┌─────►└─────┘   └────►└─────┘   └─────►└─────┘   └─────►└─────┘   └─────►└─────┘   └─────►└─────┘&#xA;                  │        4K              4K               4K               4K                4K               4K&#xA;                  │&#xA;                  │&#xA;                  │&#xA;                  │&#xA;63         52  51 │                               12 11            0&#xA;┌─────────────┬───┴─────────────────────────────────┬───────────────┐&#xA;│             │    Page-Map Level-4 or Level-5      │               │&#xA;│    MBZ      │          Table Base Address         │               │  CR3&#xA;│             │                                     │               │&#xA;└─────────────┴─────────────────────────────────────┴───────────────┘&#xA;&#xA;1B      2^0    0x1&#xA;2B      2^1    0x2&#xA;4B      2^2    0x4&#xA;8B      2^3    0x8&#xA;16B     2^4    0x10&#xA;32B     2^5    0x20&#xA;64B     2^6    0x40&#xA;128B    2^7    0x80&#xA;256B    2^8    0x100&#xA;512B    2^9    0x200&#xA;------------------------------------------------------&#xA;1KB     2^10   0x400&#xA;2KB     2^11   0x800&#xA;4KB     2^12   0x1000&#xA;8KB     2^13   0x2000&#xA;16KB    2^14   0x4000&#xA;32KB    2^15   0x8000&#xA;64KB    2^16   0x10000&#xA;128KB   2^17   0x20000&#xA;256KB   2^18   0x40000&#xA;512KB   2^19   0x80000&#xA;------------------------------------------------------&#xA;1MB     2^20   0x100000&#xA;2MB     2^21   0x200000&#xA;4MB     2^22   0x400000&#xA;8MB     2^23   0x800000&#xA;16MB    2^24   0x1000000&#xA;32MB    2^25   0x2000000&#xA;64MB    2^26   0x4000000&#xA;128MB   2^27   0x8000000&#xA;256MB   2^28   0x10000000&#xA;512MB   2^29   0x20000000&#xA;------------------------------------------------------&#xA;1GB     2^30   0x40000000&#xA;2GB     2^31   0x80000000&#xA;4GB     2^32   0x100000000&#xA;8GB     2^33   0x200000000&#xA;16GB    2^34   0x400000000&#xA;32GB    2^35   0x800000000&#xA;64GB    2^36   0x1000000000&#xA;128GB   2^37   0x2000000000&#xA;256GB   2^38   0x4000000000&#xA;512GB   2^39   0x8000000000&#xA;------------------------------------------------------&#xA;1TB     2^40   0x10000000000&#xA;2TB     2^41   0x20000000000&#xA;4TB     2^42   0x40000000000&#xA;8TB     2^43   0x80000000000&#xA;16TB    2^44   0x100000000000&#xA;32TB    2^45   0x200000000000&#xA;64TB    2^46   0x400000000000&#xA;128TB   2^47   0x800000000000&#xA;256TB   2^48   0x1000000000000&#xA;512TB   2^49   0x2000000000000&#xA;------------------------------------------------------&#xA;1PB     2^50   0x4000000000000&#xA;2PB     2^51   0x8000000000000&#xA;4PB     2^52   0x10000000000000&#xA;8PB     2^53   0x20000000000000&#xA;16PB    2^54   0x40000000000000&#xA;32PB    2^55   0x80000000000000&#xA;64PB    2^56   0x100000000000000&#xA;128PB   2^57   0x200000000000000&#xA;256PB   2^58   0x400000000000000&#xA;512PB   2^59   0x800000000000000&#xA;------------------------------------------------------&#xA;1EB     2^60   0x1000000000000000&#xA;2EB     2^61   0x2000000000000000&#xA;4EB     2^62   0x4000000000000000&#xA;8EB     2^63   0x8000000000000000&#xA;&#xA;&lt;/pre&gt;&#xA;    &lt;script&gt;&#xA;        // Attach event listeners to text fields&#xA;        document.getElementById(&#39;tbFromHex&#39;).addEventListener(&#39;input&#39;, tbFromHex_TextChanged);&#xA;        document.getElementById(&#39;tbSizeHex&#39;).addEventListener(&#39;input&#39;, tbSizeHex_TextChanged);&#xA;        document.getElementById(&#39;tbMemHex&#39;).addEventListener(&#39;input&#39;, tbMemHex_TextChanged);&#xA;        window.onload = tbFromHex_TextChanged;&#xA;&#xA;        function convertHexStringToUInt64(hex) {&#xA;            if (!hex) {&#xA;                return BigInt(0);&#xA;            }&#xA;&#xA;            if (hex.startsWith(&#34;0x&#34;) || hex.startsWith(&#34;0X&#34;)) {&#xA;                hex = hex.substring(2);&#xA;            }&#xA;&#xA;            if (!hex) {&#xA;                return BigInt(0);&#xA;            }&#xA;&#xA;            try {&#xA;                return BigInt(`0x${hex}`);&#xA;            } catch {&#xA;                return BigInt(`0x${hex.substring(0, 16)}`);&#xA;            }&#xA;        }&#xA;&#xA;        function convertUInt64ToHexString(number) {&#xA;            return number.toString(16).toUpperCase();&#xA;        }&#xA;&#xA;        function updateResults(from, size) {&#xA;            document.getElementById(&#34;tbResults&#34;).innerText = &#39;&#39;;&#xA;&#xA;            ptPrintBinary(from);&#xA;            ptPrintBinary(from + size - BigInt(1));&#xA;&#xA;            ptFindSpaceRequired(from, size);&#xA;        }&#xA;&#xA;        const PAGE_INDEX_MASK = BigInt(0x1FF);&#xA;&#xA;        const PML5_START_BIT = 48;&#xA;        const PML4_START_BIT = 39;&#xA;        const PDP_START_BIT = 30;&#xA;        const PD_START_BIT = 21;&#xA;        const PT_START_BIT = 12;&#xA;&#xA;        const PML5_STOP_BIT = PML5_START_BIT + 9;&#xA;        const PML4_STOP_BIT = PML4_START_BIT + 9;&#xA;        const PDP_STOP_BIT = PDP_START_BIT + 9;&#xA;        const PD_STOP_BIT = PD_START_BIT + 9;&#xA;        const PT_STOP_BIT = PT_START_BIT + 9;&#xA;&#xA;        const PAGE_SIZE = 4096;&#xA;        const NUM_ENTRIES = PAGE_SIZE / 8;&#xA;&#xA;        function ptPrintBinary(addr) {&#xA;            const slots = [64, 57, PML5_START_BIT, PML4_START_BIT, PDP_START_BIT, PD_START_BIT, PT_START_BIT, 0];&#xA;            const tbResults = document.getElementById(&#34;tbResults&#34;);&#xA;            tbResults.innerText += &#34;\n&#34;;&#xA;            tbResults.innerText += `0x${addr.toString(16).padStart(16, &#39;0&#39;).toUpperCase()} :\n`;&#xA;&#xA;            tbResults.innerText += `       |${&#39;PML5&#39;.padStart(9)}|${&#39;PML4&#39;.padStart(9)}|${&#39;PDP/PML3&#39;.padStart(9)}|${&#39;PD/PML2&#39;.padStart(9)}|${&#39;PT/PML1&#39;.padStart(9)}|${&#39;Physical&#39;.padStart(12)}\n`;&#xA;&#xA;            for (let i = 0; i &lt; slots.length - 1; i++) {&#xA;                for (let j = slots[i] - 1; j &gt;= slots[i + 1]; j--) {&#xA;                    tbResults.innerText += `${Math.floor(j / 10)}`;&#xA;                }&#xA;                if (i !== slots.length - 2) tbResults.innerText += &#34;|&#34;;&#xA;            }&#xA;            tbResults.innerText += &#34;\n&#34;;&#xA;&#xA;            for (let i = 0; i &lt; slots.length - 1; i++) {&#xA;                for (let j = slots[i] - 1; j &gt;= slots[i + 1]; j--) {&#xA;                    tbResults.innerText += `${j % 10}`;&#xA;                }&#xA;                if (i !== slots.length - 2) tbResults.innerText += &#34;|&#34;;&#xA;            }&#xA;            tbResults.innerText += &#34;\n&#34;;&#xA;&#xA;            for (let i = 0; i &lt; slots.length - 1; i++) {&#xA;                for (let j = slots[i] - 1; j &gt;= slots[i + 1]; j--) {&#xA;                    tbResults.innerText += `${(addr &gt;&gt; BigInt(j)) &amp; BigInt(1)}`;&#xA;                }&#xA;                if (i !== slots.length - 2) tbResults.innerText += &#34;|&#34;;&#xA;            }&#xA;            tbResults.innerText += &#34;\n&#34;;&#xA;&#xA;            for (let i = 0; i &lt; slots.length - 1; i++) {&#xA;                const slotWidth = BigInt(slots[i] - slots[i + 1]);&#xA;                const slotValue = (addr &gt;&gt; BigInt(slots[i + 1])) &amp; ((BigInt(1) &lt;&lt; slotWidth) - BigInt(1));&#xA;                tbResults.innerText += slotValue.toString(16).padStart(Number(slotWidth), &#39; &#39;).toUpperCase();&#xA;&#xA;                if (i !== slots.length - 2) tbResults.innerText += &#34;|&#34;;&#xA;            }&#xA;            tbResults.innerText += &#34; Hex\n&#34;;&#xA;&#xA;            for (let i = 0; i &lt; slots.length - 1; i++) {&#xA;                const slotWidth = BigInt(slots[i] - slots[i + 1]);&#xA;                const slotValue = (addr &gt;&gt; BigInt(slots[i + 1])) &amp; ((BigInt(1) &lt;&lt; slotWidth) - BigInt(1));&#xA;                tbResults.innerText += slotValue.toString().padStart(Number(slotWidth), &#39; &#39;);&#xA;&#xA;                if (i !== slots.length - 2) tbResults.innerText += &#34;|&#34;;&#xA;            }&#xA;            tbResults.innerText += &#34; Decimal\n&#34;;&#xA;        }&#xA;&#xA;        function findNumEntries(startOffset, endOffset, numParentLevelEntries) {&#xA;            let numEntries = BigInt(0);&#xA;&#xA;            if (numParentLevelEntries &gt; BigInt(1)) {&#xA;                numEntries += BigInt(512) - startOffset; // Number of upper entries in first page&#xA;                numEntries += (numParentLevelEntries - BigInt(2)) * BigInt(512); // Number of entries in between pages&#xA;                numEntries += endOffset + BigInt(1); // Number of lower entries in the last page&#xA;            } else {&#xA;                numEntries = endOffset - startOffset + BigInt(1); // Number of entries in the page&#xA;            }&#xA;&#xA;            return numEntries;&#xA;        }&#xA;&#xA;        function ptFindSpaceRequired(start, size) {&#xA;            const end = start + size - BigInt(1);&#xA;&#xA;            const pml5StartOffset = (start &gt;&gt; BigInt(PML5_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const pml4StartOffset = (start &gt;&gt; BigInt(PML4_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const pdpStartOffset = (start &gt;&gt; BigInt(PDP_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const pdStartOffset = (start &gt;&gt; BigInt(PD_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const ptStartOffset = (start &gt;&gt; BigInt(PT_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;&#xA;            const pml5EndOffset = (end &gt;&gt; BigInt(PML5_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const pml4EndOffset = (end &gt;&gt; BigInt(PML4_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const pdpEndOffset = (end &gt;&gt; BigInt(PDP_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const pdEndOffset = (end &gt;&gt; BigInt(PD_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;            const ptEndOffset = (end &gt;&gt; BigInt(PT_START_BIT)) &amp; PAGE_INDEX_MASK;&#xA;&#xA;            const numPml5Entries = pml5EndOffset - pml5StartOffset + BigInt(1);&#xA;            const numPml4Entries = findNumEntries(pml4StartOffset, pml4EndOffset, numPml5Entries);&#xA;            const numPdpEntries = findNumEntries(pdpStartOffset, pdpEndOffset, numPml4Entries);&#xA;            const numPdEntries = findNumEntries(pdStartOffset, pdEndOffset, numPdpEntries);&#xA;            const numPtEntries = findNumEntries(ptStartOffset, ptEndOffset, numPdEntries);&#xA;&#xA;            const numPml5Tables = BigInt(1);&#xA;            const numPml4Tables = numPml5Entries;&#xA;            const numPdpTables = numPml4Entries;&#xA;            const numPdTables = numPdpEntries;&#xA;            const numPtTables = numPdEntries;&#xA;&#xA;            const numberOfTables = numPml5Tables + numPml4Tables + numPdpTables + numPdTables + numPtTables;&#xA;&#xA;            const tbResults = document.getElementById(&#34;tbResults&#34;);&#xA;&#xA;            tbResults.innerText += &#34;---------------------------------------------\n&#34;;&#xA;            tbResults.innerText += `pml5 entries  : ${numPml5Entries}\n`;&#xA;            tbResults.innerText += `pml4 entries  : ${numPml4Entries}\n`;&#xA;            tbResults.innerText += `pdp entries   : ${numPdpEntries}\n`;&#xA;            tbResults.innerText += `pd entries    : ${numPdEntries}\n`;&#xA;            tbResults.innerText += `pt entries    : ${numPtEntries}\n`;&#xA;&#xA;            tbResults.innerText += &#34;---------------------------------------------\n&#34;;&#xA;            tbResults.innerText += `pml5 tables   : ${numPml5Tables}\n`;&#xA;            tbResults.innerText += `pml4 tables   : ${numPml4Tables}\n`;&#xA;            tbResults.innerText += `pdp tables    : ${numPdpTables}\n`;&#xA;            tbResults.innerText += `pd tables     : ${numPdTables}\n`;&#xA;            tbResults.innerText += `pt tables     : ${numPtTables}\n`;&#xA;&#xA;            tbResults.innerText += &#34;---------------------------------------------\n&#34;;&#xA;            tbResults.innerText += `Memory being mapped                  : [0x${start.toString(16).toUpperCase()}-0x${end.toString(16).toUpperCase()}] = ${formatSize(end - start + BigInt(1))}(${end - start + BigInt(1)} bytes)\n`;&#xA;            tbResults.innerText += `Number of page tables required       : ${numberOfTables}\n`;&#xA;            tbResults.innerText += `Memory required to build page tables : ${formatSize(numberOfTables * BigInt(PAGE_SIZE))}\n`;&#xA;            tbResults.innerText += `---------------------------------------------\n`;&#xA;        }&#xA;&#xA;        function formatSize(bytes) {&#xA;            const KB = BigInt(1024);&#xA;            const MB = KB * BigInt(1024);&#xA;            const GB = MB * BigInt(1024);&#xA;            const TB = GB * BigInt(1024);&#xA;&#xA;            if (bytes &gt;= TB) {&#xA;                return (Number(bytes) / Number(TB)).toFixed(2) + &#34; TB&#34;;&#xA;            }&#xA;            if (bytes &gt;= GB) {&#xA;                return (Number(bytes) / Number(GB)).toFixed(2) + &#34; GB&#34;;&#xA;            }&#xA;            if (bytes &gt;= MB) {&#xA;                return (Number(bytes) / Number(MB)).toFixed(2) + &#34; MB&#34;;&#xA;            }&#xA;            if (bytes &gt;= KB) {&#xA;                return (Number(bytes) / Number(KB)).toFixed(2) + &#34; KB&#34;;&#xA;            }&#xA;            return bytes + &#34; bytes&#34;;&#xA;        }&#xA;&#xA;        function tbFromHex_TextChanged() {&#xA;            const from = convertHexStringToUInt64(document.getElementById(&#34;tbFromHex&#34;).value.replaceAll(&#34;_&#34;, &#34;&#34;));&#xA;            const size = convertHexStringToUInt64(document.getElementById(&#34;tbSizeHex&#34;).value.replaceAll(&#34;_&#34;, &#34;&#34;));&#xA;&#xA;            document.getElementById(&#34;tbToHex&#34;).value = &#34;0x&#34; + convertUInt64ToHexString(from + size - BigInt(1));&#xA;&#xA;            updateResults(from, size);&#xA;        }&#xA;&#xA;        function tbSizeHex_TextChanged() {&#xA;            tbFromHex_TextChanged();&#xA;        }&#xA;&#xA;        function tbMemHex_TextChanged() {&#xA;            const mem = convertHexStringToUInt64(document.getElementById(&#34;tbMemHex&#34;).value);&#xA;            tbMemResults.innerText = `${formatSize(BigInt(mem))}`&#xA;&#xA;        }&#xA;&#xA;        // Define the conversion factors to bytes&#xA;        const unitToBytes = {&#xA;            bytes: BigInt(1),&#xA;            kb: BigInt(1024),&#xA;            mb: BigInt(1024 * 1024),&#xA;            gb: BigInt(1024 * 1024 * 1024),&#xA;            tb: BigInt(1024 * 1024 * 1024 * 1024),&#xA;        };&#xA;&#xA;        // Function to calculate and display the result&#xA;        function calculateResult() {&#xA;            // Get the selected quantity and unit&#xA;            const quantity = BigInt(parseFloat(document.getElementById(&#39;quantity&#39;).value));&#xA;            const unit = document.getElementById(&#39;unit&#39;).value;&#xA;&#xA;            // Convert the selected unit to bytes&#xA;            const unitInBytes = unitToBytes[unit];&#xA;&#xA;            // Calculate the total in bytes&#xA;            const totalBytes = quantity * unitInBytes;&#xA;&#xA;            document.getElementById(&#34;tbSizeHex&#34;).value = &#34;0x&#34; + convertUInt64ToHexString(totalBytes);&#xA;            tbSizeHex_TextChanged();&#xA;        }&#xA;&#xA;        // Add event listeners to both dropdowns&#xA;        document.getElementById(&#39;quantity&#39;).addEventListener(&#39;change&#39;, calculateResult);&#xA;        document.getElementById(&#39;unit&#39;).addEventListener(&#39;change&#39;, calculateResult);&#xA;    &lt;/script&gt;&#xA;&lt;/body&gt;&#xA;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:9999/tools/uefilog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:9999/tools/uefilog/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34; /&gt;&#xA;    &lt;title&gt;UEFI Log File Processor&lt;/title&gt;&#xA;    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1&#34; /&gt;&#xA;&#xA;    &lt;!-- Bootstrap CSS CDN --&gt;&#xA;    &lt;link&#xA;      href=&#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&#34;&#xA;      rel=&#34;stylesheet&#34;&#xA;    /&gt;&#xA;&#xA;    &lt;!-- Load Require JS --&gt;&#xA;    &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.45.0/min/vs/loader.min.js&#34;&gt;&lt;/script&gt;&#xA;&#xA;    &lt;style&gt;&#xA;      #editor {&#xA;        width: 100%;&#xA;        height: 70vh;&#xA;        border: 1px solid #ced4da;&#xA;        border-radius: 0.375rem;&#xA;        margin-top: 15px;&#xA;      }&#xA;    &lt;/style&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body class=&#34;bg-light&#34;&gt;&#xA;    &lt;div class=&#34;container py-2&#34;&gt;&#xA;      &lt;h1 class=&#34;mb-4&#34;&gt;UEFI Log File Processor&lt;/h1&gt;&#xA;&#xA;      &lt;div class=&#34;row g-3 align-items-center mb-3&#34;&gt;&#xA;        &lt;div class=&#34;col-md-9&#34;&gt;&#xA;          &lt;input type=&#34;file&#34; id=&#34;fileInput&#34; class=&#34;form-control&#34; /&gt;&#xA;        &lt;/div&gt;&#xA;        &lt;div class=&#34;col-md-3&#34;&gt;&#xA;          &lt;button id=&#34;convertBtn&#34; class=&#34;btn btn-primary w-100&#34;&gt;Convert&lt;/button&gt;&#xA;        &lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;&#xA;      &lt;div id=&#34;editor&#34;&gt;&lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;!-- Bootstrap JS Bundle CDN (Optional if you need Bootstrap JS components) --&gt;&#xA;    &lt;script src=&#34;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&#34;&gt;&lt;/script&gt;&#xA;&#xA;    &lt;script type=&#34;module&#34; src=&#34;index.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
