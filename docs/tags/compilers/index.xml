<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compilers on Vineel Kovvuri</title>
    <link>//localhost:9999/tags/compilers/</link>
    <description>Recent content in Compilers on Vineel Kovvuri</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 18:33:07 -0700</lastBuildDate>
    <atom:link href="//localhost:9999/tags/compilers/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compiler Internals</title>
      <link>//localhost:9999/blog/compiler-internals/</link>
      <pubDate>Fri, 01 Nov 2019 18:33:07 -0700</pubDate>
      <guid>//localhost:9999/blog/compiler-internals/</guid>
      <description>&lt;h1 id=&#34;basics&#34;&gt;Basics&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888&#34;&gt;//a.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;myadd&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;10&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;100&lt;/span&gt;; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum += i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;myadd2&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;10&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; i = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;100&lt;/span&gt;; i++)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum += i*i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; sum;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;myadd&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;cl /c a.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;link /dump /symbols a.obj&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;008&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;00000000&lt;/span&gt; SECT3  notype ()    External     | myadd&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;009&lt;/span&gt; &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;00000050&lt;/span&gt; SECT3  notype ()    External     | myadd2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00A 000000A0 SECT3  notype ()    External     | main&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;link /dump&lt;/strong&gt; command dumps the symbols that are part of the obj file. The&#xA;compiler cannot optimize myadd2 because technically these unused functions can&#xA;be accessed by functions in other libs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pdb Files: The Glue Between The Binary File And Source Code</title>
      <link>//localhost:9999/blog/pdb-files-the-glue-between-the-binary-file-and-source-code/</link>
      <pubDate>Thu, 10 Jan 2019 18:33:07 -0700</pubDate>
      <guid>//localhost:9999/blog/pdb-files-the-glue-between-the-binary-file-and-source-code/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;Have you ever wondered how a debugger magically gets you to the correct pdb and&#xA;correct sources when debugging an application? This article talks exactly that in&#xA;the context of Windbg.&lt;/p&gt;&#xA;&lt;p&gt;As you might be aware of, PDB files(also called as symbol files) is the glue&#xA;between your application binary and the source code. There are two key Environment&#xA;variables which configures Windbg about where to look for symbols and sources.&#xA;They are _NT_SYMBOL_PATH and _NT_SOURCE_PATH. The _NT_SYMBOL_PATH points&#xA;to the directory containing your PDBs(also called as symbol files) or to a symbol&#xA;server. _NT_SOURCE_PATH points to the directory of your sources or to a source&#xA;server which indexes the soruce files. One important point to remember here is&#xA;one or more source files make up one or more binary files. But each binary will&#xA;have a single PDB unless the source code is modified. This is important because&#xA;Windbg has to perform lot of book keeping to map binary symbols with their source&#xA;locations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lib Files 101</title>
      <link>//localhost:9999/blog/lib-files-101/</link>
      <pubDate>Sat, 10 Nov 2018 18:33:07 -0700</pubDate>
      <guid>//localhost:9999/blog/lib-files-101/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;During the compilation one of the crucial step after assembling is&#xA;creating the Object files. The collection of these object files is&#xA;called a lib file. We can create these .lib files through following&#xA;visual studio project types&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Static Library&lt;/li&gt;&#xA;&lt;li&gt;Dynamic Linked Library&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The format of these .lib files is specified in &amp;lsquo;Archive (Library) File Format.&amp;rsquo;&#xA;section of &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format#archive-library-file-formatspecification&#34;&gt;PE&#xA;Format&lt;/a&gt;.&#xA;As per the spec, .lib is an archive of individual .obj files with some metadata.&#xA;Multiple tools can be used to extract lib files. Visual Studio installation&#xA;contains Lib.exe tool. Since .lib and .obj files follow Unix COFF format Unix&#xA;binutil&amp;rsquo;s &amp;lsquo;ar&amp;rsquo; tool can be used to extract it.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
