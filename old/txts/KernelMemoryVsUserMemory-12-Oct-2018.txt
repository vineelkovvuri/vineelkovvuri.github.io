Today, I wanted to understand exactly how usermode memory is not shared among
other processes where as kernel memory is being shared between all the
processes.

To understand this we need to first understand how a process memory is actually
mapped to physical memory. To recap breifly every process which is executing on
the current core will have to map the its virutal memory using page tables via
its CR3 register. This mapping will make sure any virutal memory that the
processor refers to will be translated to physical memory appropriately.

In Windbg, Once you are on the required process context we can just use
1: kd> !process -1 0
PROCESS ffffbf0b7efa25c0
    SessionId: 1  Cid: 1298    Peb: a5ae79d000  ParentCid: 1d48
    DirBase: 3addf000  ObjectTable: ffffd18c8159d4c0  HandleCount:  30.
    Image: ConsoleApplication1.exe

The DirBase is nothing but the CR3 register.

Now any virutal address in the process can be translated to it physical memory
using
0: kd> !vtop 0 00007ff6d00d0a30
Amd64VtoP: Virt 00007ff6d00d0a30, pagedir 00000000161f7000
Amd64VtoP: PML4E 00000000161f77f8
Amd64VtoP: PDPE 000000001a066ed8
Amd64VtoP: PDE 000000002d227400
Amd64VtoP: PTE 000000000d528680
Amd64VtoP: Mapped phys 0000000028b4fa30
Virtual address 7ff6d00d0a30 translates to physical address 28b4fa30.

Before answering the begining question, we need to understand that by default
all modules (ntdll.dll/kernelbase.dll etc) gets physically mapped to the same
location. We can validate this by dumping the physical address of same function
(ntdll!RtlUserThreadStart) in two different processes. So there will be only one
copy for everything in physical memory. But when the content of these dlls
change in memory thats when the Memory manager will create a new copy in
physcial memory.

int g_global = 10;
int main()
{
    DebugBreak();
    printf("\nExamine Before Modifying %d @ %p\n", g_global, &g_global);
    getchar();
}

Application 1:
0: kd> g
Break instruction exception - code 80000003 (first chance)
KERNELBASE!DebugBreak [inlined in KERNELBASE!wil::details::DebugBreak+0x2]:
0033:00007ffc`79cb67e2 cc              int     3
0: kd> !process -1 0
PROCESS ffffbf0b7ed6a080
    SessionId: 1  Cid: 18e8    Peb: 3ee4887000  ParentCid: 135c
    DirBase: 2649b000  ObjectTable: ffffd18c7f019800  HandleCount:  30.
    Image: ConsoleApplication1.exe

0: kd> .reload
0: kd> x nt!NtCreateFile
fffff802`53da3b80 nt!NtCreateFile
0: kd> !vtop 0 fffff80253da3b80
Amd64VtoP: Virt fffff80253da3b80, pagedir 000000002649b000
Amd64VtoP: PML4E 000000002649bf80
Amd64VtoP: PDPE 0000000000949048
Amd64VtoP: PDE 000000000094a4f0
Amd64VtoP: PTE 0000000000954d18
Amd64VtoP: Mapped phys 00000000023a3b80
Virtual address fffff80253da3b80 translates to physical address 23a3b80.
0: kd> x ConsoleApplication1!g_global
00007ff7`e2490a30 ConsoleApplication1!g_global = 0n10
0: kd> !vtop 0 00007ff7e2490a30
Amd64VtoP: Virt 00007ff7e2490a30, pagedir 000000002649b000
Amd64VtoP: PML4E 000000002649b7f8
Amd64VtoP: PDPE 000000001e1d5ef8
Amd64VtoP: PDE 000000003c196890
Amd64VtoP: PTE 00000000346d7480
Amd64VtoP: Mapped phys 00000000115bca30
Virtual address 7ff7e2490a30 translates to physical address 115bca30.
0: kd> g

Application 2:
Break instruction exception - code 80000003 (first chance)
KERNELBASE!DebugBreak [inlined in KERNELBASE!wil::details::DebugBreak+0x2]:
0033:00007ffc`79cb67e2 cc              int     3
0: kd> !process -1 0
PROCESS ffffbf0b7efa25c0
    SessionId: 1  Cid: 082c    Peb: 3fe88a9000  ParentCid: 1d48
    DirBase: 198a9000  ObjectTable: ffffd18c80c9a640  HandleCount:  30.
    Image: ConsoleApplication1.exe

0: kd> .reload
0: kd> x nt!NtCreateFile
fffff802`53da3b80 nt!NtCreateFile
0: kd> !vtop 0 fffff80253da3b80
Amd64VtoP: Virt fffff80253da3b80, pagedir 00000000198a9000
Amd64VtoP: PML4E 00000000198a9f80
Amd64VtoP: PDPE 0000000000949048
Amd64VtoP: PDE 000000000094a4f0
Amd64VtoP: PTE 0000000000954d18
Amd64VtoP: Mapped phys 00000000023a3b80
Virtual address fffff80253da3b80 translates to physical address 23a3b80.
0: kd> x ConsoleApplication1!g_global
00007ff7`e2490a30 ConsoleApplication1!g_global = 0n10
0: kd> !vtop 0 00007ff7e2490a30
Amd64VtoP: Virt 00007ff7e2490a30, pagedir 00000000198a9000
Amd64VtoP: PML4E 00000000198a97f8
Amd64VtoP: PDPE 0000000029d4def8
Amd64VtoP: PDE 000000003e24e890
Amd64VtoP: PTE 000000001a24f480
Amd64VtoP: Mapped phys 0000000011134a30
Virtual address 7ff7e2490a30 translates to physical address 11134a30.

In the above listing both instances of the applicaiton the physical address for
nt!NtCreateFile is same 23a3b80. Where as physcial address of
ConsoleApplication1!g_global is different.

NOTE: Modifiying the memory content via windbg does not involve Memory Manager
and directly written to the physical memory. So the changed value might get
reflected even in the second process as well!
