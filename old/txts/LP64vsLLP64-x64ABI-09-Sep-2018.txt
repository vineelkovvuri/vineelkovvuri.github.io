
In researching about how signed and unsigned integer conversions work in C
language, I came to find that the size of long is 4 on Windows x64 when compiled
with VC++ compiler. Interestingly, the size of long is 8 on Linux x64
(via Godbolt compiler explorer) with clang. Now, there is clearly something else
is contributing to these differences, And my assumption of on every x64 platform
long is 4 bytes is incorrect and not all x64 platforms has same size either.

This is when I tried to dig little deeper to answer "How does the size of long
data type determined by the compilers?". The compilers determine(fix) the size
of the data type according to the specification of Application Binary Interface
(ABI) of the platform(OS). This is also called as "64-bit programming models".
Looks like we have not just one model but three!

There are three basic models that can be chosen, LP64, ILP64 and LLP64 as shown
in the following table. The notation describes the width assigned to the basic
data types. LP64 (also known as 4/8/8) denotes long and pointer as 64 bit types,
ILP64 (also known as 8/8/8) means int, long and pointer are 64 bit types and
LLP64 (also known as 4/4/8) adds a new type (long long) and pointer as 64 bit
types. Most of today's 32 bit systems are ILP32 (that is, int, long and pointers
are all 32-bits wide).

Datatype    LP64    ILP64   LLP64   ILP32   LP32
char        8       8       8       8       8
short       16      16      16      16      16
int         32      64      32      32      16
long        64      64      32      32      32
long long                   64
pointer     64      64      64      32      32

Most Unix systems follow AMD64/System V Application Binary Interface ABI. This
specification talks about two models "Binaries using the AMD64 instruction set
may program to either a 32-bit model, in which the C data types int, long and
all pointer types are 32-bit objects (ILP32); or to a 64-bit model, in which the
C int type is 32-bits but the C long type and all pointer types are 64-bit
objects (LP64)." So looks like the clang compiler I was using in godbolt's
website is based on LP64 ABI hence int is 4, long is 8 and pointer is 8. But on
Windows x64, it uses LLP64 so only long long is 8 and pointer is 8 bytes.
Raymond Chen has a blog post about it.

References:
http://www.unix.org/version2/whatsnew/lp64_wp.html
System V Application Binary Interface AMD64 Architecture Processor Supplement
    https://software.intel.com/sites/default/files/article/402129/mpx-linux64-abi.pdf
Why did the Win64 team choose the LLP64 model?
    https://blogs.msdn.microsoft.com/oldnewthing/20050131-00/?p=36563
https://docs.microsoft.com/en-us/windows/desktop/winprog64/abstract-data-models

